#!/usr/bin/env python3

# Helper function to try-parse a string to a float:
def try_parse_float(str_to_parse: str) -> float | None:
    '''
    Try to parse a string into a float. Returns the parsed float if successful,
    returns None if failure. If the value can more sensibly be converted to an
    int, also returns None.
    '''
    try:
        convd_val: float = float(str_to_parse)
        if int(convd_val) - convd_val == 0:
            return None
        return convd_val
    except ValueError:
        return None


# Converts a CSV file to a latex table.
# Initialising variables:
table_heading: list[str] = []
table_body: list[str] = []

# Getting CSV path from user:
csv_path: str = input("Relative path to CSV file to convert: ")
# Name for output file:
output_name: str = input("Name for output file (excluding file extension): ")

# Getting data from CSV:
print("----------GETTING DATA----------")
with open(csv_path, "r") as open_csv:
    # Storing and parsing heading, stripping to remove newline char:
    table_heading = open_csv.readline().strip().split(",")
    print(f"table heading: {table_heading}")
    # Looping through all lines except header:
    line: str
    for line in open_csv:
        # Adding line to table body as split list, stripping to remove \n:
        table_body += line.strip().split(",")
        print(f"table body: {table_body}")


print("----------WRITING DATA----------")
# Creating .tex output file:
with open(f"{output_name}.tex", "w") as output:
    # Writing pre-surround:
    output.writelines([r"\begin{table}[H]", "\n",
                       "\n",
                       r"\centering", "\n",
                       r"\caption[10pt]{}", "\n",
                       r"\label{table:}", "\n",
                       "\n",
                       r"\vspace{0.3cm}", "\n",
                       "\n",
                       r"\begin{tabular}{||}", "\n",
                       "\n",
                       r"\hline", "\n"])

    # Writing header:
    header_col: str
    for header_col in table_heading:
        # Checking if we are at the last column, and writing backslashes if so:
        if header_col == table_heading[-1]:
            print(f"last header col: {repr(header_col)}")
            output.write(header_col + r" \\" + "\n")
        else:
            print(f"header col: {repr(header_col)}")
            output.write(header_col + " & ")
    # Adding hline after header columns:
    output.writelines([r"\hline", "\n"])

    # Writing body:
    body_col: str
    for idx, body_col in enumerate(table_body):
        # If we come to the last element of a given row, add a \\ and a \n to
        # start a newline:
        if (idx + 1) % len(table_heading) == 0:
            print(f"last body col: {repr(body_col)}")
            # Check if the column value can be converted to a float. If so,
            # write it to the tex file to 4dp:
            col_float: float | None = try_parse_float(body_col)
            if col_float is not None:
                output.write(f"{col_float:.4f}" + r" \\" + "\n")
            else:
                output.write(body_col + r" \\" + "\n")
        # Otherwise, add a & to continue to the next column in tex:
        else:
            print(f"body col: {repr(body_col)}")
            col_float: float | None = try_parse_float(body_col)
            if col_float is not None:
                output.write(f"{col_float:.4f} & ")
            else:
                output.write(body_col + " & ")

    # Writing post-surround:
    output.writelines([r"\hline", "\n",
                       "\n",
                       r"\end{tabular}", "\n",
                       "\n",
                       r"\end{table}"])

#!/usr/bin/env python3

import os
import sys
import subprocess
import csv

# Constants:
INFO_FILE_PATH = os.path.join(
        os.environ["HOME"],
        ".local",
        "share",
        "todo",
        "todo.csv"
)

class ListEntry:
    def __init__(self, description: str, due_date: str):
        '''
        Creates a list entry with the given description and due date.
        '''
        self.description: str = description
        self.due_date: str = due_date

class TaskList:
    def __init__(self) -> None:
        '''
        Initialises TaskList instance with task list read from info file.
        '''
        self.tasks: list[ListEntry] = []
        # Loading tasks from file:
        loaded_successfully: bool = False
        while not loaded_successfully:
            try:
                with open(INFO_FILE_PATH, 'r', newline = '') as info_csv:
                    # Getting csv reader object:
                    reader = csv.reader(info_csv)
                    # Getting task info, with each field an element in a list:
                    task_info: list[str]
                    for task_info in reader:
                        # Adding task with given info (desc. and due date):
                        self.add_task(task_info[0], task_info[1])    
                loaded_successfully = True

            except FileNotFoundError:
                new_file = open(INFO_FILE_PATH, 'w')
                new_file.close()

    def save_list(self) -> None:
        '''
        Saves list to .csv file to be recreated on next open.
        '''
        with open(INFO_FILE_PATH, 'w', newline = '') as info_csv:
            writer = csv.writer(info_csv)
            # Writing each list entry to the csv:
            task: ListEntry
            for task in self.tasks:
                writer.writerow([task.description, task.due_date])

    def add_task(self, description: str, due_date: str) -> None:
        '''
        Adds task with given description to list.
        '''
        self.tasks.append(ListEntry(description, due_date))

    def remove_task(self, idx_to_remove: int) -> ListEntry:
        '''
        Removes entry at given index in task list.
        '''
        return self.tasks.pop(idx_to_remove)

    def display_tasks(self) -> None:
        '''
        Displays numbered tasks to stdout.
        '''
        print("To-Do, by Rahi :)")
        print("##############################")
        entry: ListEntry
        for idx, entry in enumerate(self.tasks):
            print(f"{idx + 1}: {entry.description}")
            print(f"   {entry.due_date}")
        print("##############################")

def get_choice(task_list: TaskList) -> None:
    ''' 
    Gets input from user on what to do in program. Works because as long as
    task_list is not reassigned, it is used by reference and not by value.
    '''
    choice: str = input(
        "Input:\n" +
        "1. to add an entry\n" +
        "2. to remove an entry\n" +
        "3. to save and exit\n" +
        "-\n"
    )
    # Adding element if chose 1:
    if (choice == "1"):
        print("--------------------")
        task_description: str = input("Enter task: ")
        task_due_date: str = input("Enter due date: ")
        # Add task with given description:
        task_list.add_task(task_description, task_due_date)
        task_list.save_list();

    # Removing element if chose 2 and element exists:
    elif (choice == "2"):
        # Getting index of item to remove. Subtract 1 because the items
        # are displayed to the user starting from 1:
        print("--------------------")
        idx_to_remove: int = int(input(
            "Please enter the item to remove (by list index): "
        )) - 1
        try:
            task_list.remove_task(idx_to_remove)
            task_list.save_list();
        except IndexError:
            print("--------------------")
            print("Error: The given index is not valid.")

    # Saving and exiting if 3 is chosen:
    elif (choice == "3"):
        print("--------------------")
        print("Saving and exiting...")
        print("--------------------")
        # Save data, clear display, and exit:
        task_list.save_list();
        subprocess.run(["clear"])
        sys.exit()

def main() -> None:
    # Initialising task list:
    task_list = TaskList()

    # Program loop:
    running: bool = True
    while running:
        # Clear display:
        subprocess.run(["clear"])
        task_list.display_tasks()
        # Getting user input for what to do:
        get_choice(task_list)

# EXECUTING:
if __name__ == "__main__":
    main()
